{"version":3,"sources":["services/ApiClient.js","components/LastAttemptsComponent.js","components/ChallengeComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","a","b","guess","POST_RESULT","method","headers","body","JSON","stringify","userAlias","factorA","factorB","console","log","GET_ATTEMPTS_BY_ALIAS","LastAttemptsComponent","this","props","lastAttempts","map","style","color","correct","resultAttempt","id","React","ChallengeComponent","state","message","handleSubmitResult","bind","handleChange","refreshChallenge","challenge","then","res","ok","json","setState","updateMessage","event","name","target","value","preventDefault","sendGuess","updateLastAttempts","m","getAttempts","attempts","data","forEach","item","push","className","onSubmit","type","maxLength","onChange","min","length","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d61c727.chunk.js","sourcesContent":["class ApiClient {\r\n\r\n    static SERVER_URL = 'http://localhost:8080';\r\n    static GET_CHALLENGE = '/challenges/random';\r\n    static POST_RESULT = '/attempts';\r\n    static GET_ATTEMPTS_BY_ALIAS = '/attempts?alias=';\r\n\r\n    static challenge(): Promise<Response> {\r\n        return fetch(ApiClient.SERVER_URL + ApiClient.GET_CHALLENGE);\r\n    }\r\n\r\n    static sendGuess(user: string, a: number, b: number, guess: number): Promise<Response> {\r\n        return fetch(ApiClient.SERVER_URL + ApiClient.POST_RESULT,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(\r\n                    {\r\n                        userAlias: user,\r\n                        factorA: a,\r\n                        factorB: b,\r\n                        guess: guess\r\n                    }\r\n                )\r\n            });\r\n    }\r\n\r\n    static getAttempts(userAlias: string): Promise<Response> {\r\n        console.log('Get attempts for '+userAlias);\r\n        return fetch(ApiClient.SERVER_URL +\r\n            ApiClient.GET_ATTEMPTS_BY_ALIAS + userAlias);\r\n    }\r\n}\r\nexport default ApiClient;\r\n\r\n","import * as React from 'react';\r\n\r\nclass LastAttemptsComponent extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th>Challenge</th>\r\n                    <th>Your guess</th>\r\n                    <th>Correct</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {this.props.lastAttempts.map(a =>\r\n                    <tr key={a.id}\r\n                        style={{ color: a.correct ? 'green' : 'red' }}>\r\n                        <td>{a.factorA} x {a.factorB}</td>\r\n                        <td>{a.resultAttempt}</td>\r\n                        <td>{a.correct ? \"Correct\" :\r\n                            (\"Incorrect (\" + a.factorA * a.factorB + \")\")}</td>\r\n                    </tr>\r\n                )}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LastAttemptsComponent;","import * as React from \"react\";\r\nimport ApiClient from \"../services/ApiClient\";\r\nimport LastAttemptsComponent from './LastAttemptsComponent';\r\n\r\nclass ChallengeComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            a: '', b: '',\r\n            user: '',\r\n            message: '',\r\n            guess: 0,\r\n            lastAttempts: [],\r\n        };\r\n        this.handleSubmitResult = this.handleSubmitResult.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.refreshChallenge();\r\n    }\r\n\r\n    refreshChallenge() {\r\n        ApiClient.challenge().then(\r\n            res => {\r\n                if (res.ok) {\r\n                    res.json().then(json => {\r\n                        this.setState({\r\n                            a: json.factorA,\r\n                            b: json.factorB\r\n                        });\r\n                    });\r\n                } else {\r\n                    this.updateMessage(\"Can't reach the server\");\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    handleChange(event) {\r\n        const name = event.target.name;\r\n        this.setState({\r\n            [name]: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmitResult(event) {\r\n        event.preventDefault();\r\n        ApiClient.sendGuess(this.state.user,\r\n            this.state.a, this.state.b,\r\n            this.state.guess)\r\n            .then(res => {\r\n                if (res.ok) {\r\n                    res.json().then(json => {\r\n                        if (json.correct) {\r\n                            this.updateMessage(\"Congratulations! Your guess is correct\");\r\n                        } else {\r\n                            this.updateMessage(\"Oops! Your guess \" + json.resultAttempt +\r\n                                \" is wrong, but keep playing!\");\r\n                        }\r\n                        this.updateLastAttempts(this.state.user);\r\n                        this.refreshChallenge();\r\n                    });\r\n                } else {\r\n                    this.updateMessage(\"Error: server error or not available\");\r\n                }\r\n            });\r\n    }\r\n\r\n    updateMessage(m: string) {\r\n        this.setState({\r\n            message: m\r\n        });\r\n    }\r\n\r\n    updateLastAttempts(userAlias: string) {\r\n        ApiClient.getAttempts(userAlias).then(res => {\r\n            if (res.ok) {\r\n                let attempts: Attempt[] = [];\r\n                res.json().then(data => {\r\n                    data.forEach(item => {\r\n                        attempts.push(item);\r\n                    });\r\n                    this.setState({\r\n                        lastAttempts: attempts\r\n                    });\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"display-column\">\r\n                <div>\r\n                    <h3>Your new challenge is</h3>\r\n                    <div className=\"challenge\">\r\n                        {this.state.a} x {this.state.b}\r\n                    </div>\r\n                </div>\r\n                <form onSubmit={this.handleSubmitResult}>\r\n                    <label>\r\n                        Your alias:\r\n                        <input type=\"text\" maxLength=\"12\"\r\n                               name=\"user\"\r\n                               value={this.state.user}\r\n                               onChange={this.handleChange}/>\r\n                    </label>\r\n                    <br/>\r\n                    <label>\r\n                        Your guess:\r\n                        <input type=\"number\" min=\"0\"\r\n                               name=\"guess\"\r\n                               value={this.state.guess}\r\n                               onChange={this.handleChange}/>\r\n                    </label>\r\n                    <br/>\r\n                    <input type=\"submit\" value=\"Submit\"/>\r\n                </form>\r\n                <h4>{this.state.message}</h4>\r\n                {this.state.lastAttempts.length > 0 &&\r\n                <LastAttemptsComponent lastAttempts={this.state.lastAttempts}/>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChallengeComponent;","import React from 'react';\r\nimport './App.css';\r\nimport ChallengeComponent from './components/ChallengeComponent';\r\n\r\nfunction App() {\r\n  return <ChallengeComponent/>;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}